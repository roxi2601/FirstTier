#pragma checksum "d:\dnp1\FirstTier\FirstTier\Pages\ArtworkPage.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b003ed974f3b033230e10937bfdfe3493247f9b0"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FirstTier.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using FirstTier;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "d:\dnp1\FirstTier\FirstTier\_Imports.razor"
using FirstTier.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "d:\dnp1\FirstTier\FirstTier\Pages\ArtworkPage.razor"
using FirstTier.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "d:\dnp1\FirstTier\FirstTier\Pages\ArtworkPage.razor"
using FirstTier.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "d:\dnp1\FirstTier\FirstTier\Pages\ArtworkPage.razor"
using Microsoft.VisualBasic.CompilerServices;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "d:\dnp1\FirstTier\FirstTier\Pages\ArtworkPage.razor"
using FirstTier.Authentication;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/ArtworkPage/{id}")]
    public partial class ArtworkPage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 140 "d:\dnp1\FirstTier\FirstTier\Pages\ArtworkPage.razor"
       
    [Parameter]
    public string Id { get; set; }

    bool isOwner;
    string errorMessage = "";

    int id;

    List<Artwork> artworks;
    Artwork artwork = new Artwork();
    string imagePath = "images/paleta.jpg";

    //for searching
    private string searchTerm;
    private string SearchTerm {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }
    #region Pagination
    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";
    #endregion

    private void ProfileClick(int id)
    {
        NavigationManager.NavigateTo("/Profile/"+id);
    }

    public void Chat()
    {
        NavigationManager.NavigateTo("/Chat");
    }
    
    protected async Task Delete()
    {
        try
        {
            /*ArtworkService.DeleteArtworkAsync(id);
            NavigationManager.NavigateTo("/");*/
            await ArtworkService.DeleteArtworkAsync(id);
            artworks = await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    public void Edit()
    {
        NavigationManager.NavigateTo("/EditArtwork/"+id);
    }
    public void Report()
    {
        //HERE IS PLACE FOR MELANIA'S IMPLEMENTATION OF REPORTING/NOTIFICATIONS FUNCTIONALITY
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            id = Int32.Parse(Id);
            artwork = await ArtworkService.GetArtworkAsync(id);
            imagePath = "images/artwork" + artwork.id + ".jpg";
            User user = ((UserCustomAuthenticationStateProvider) AuthenticationStateProvider).GetCurrentUser();
            if (user != null)
            {
                isOwner = user.ID == artwork.userId;
            }
            if (searchTerm != null)
            {
                //display total page buttons
                pagerSize = 3;
                pageSize = 2;
                curPage = 1;
                artworks = await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
                totalRecords = await ArtworkService.CountAsync(searchTerm);
                totalPages = (int) Math.Ceiling(totalRecords / (decimal) pageSize);
                SetPagerSize("forward");
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    
    private bool isSortedAscending;
    private string activeSortColumn;
    private async Task<List<Artwork>> SortRecords(string columnName, string dir)
    {
        return await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    }
    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            artworks = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                artworks = await SortRecords(columnName, "DESC");
            }
            else
            {
                artworks = await SortRecords(columnName, "ASC");
            }
            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    
    public async Task refreshRecords(int currentPage)
    {
        artworks = await ArtworkService.ListAllAsync((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }
    
    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }
    
    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }
    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ArtworkService ArtworkService { get; set; }
    }
}
#pragma warning restore 1591
