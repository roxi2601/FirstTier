@page "/Chat"
@inject NavigationManager NavigationManager
@inject AccountService AccountService
@inject ChatService ChatService
@using Microsoft.AspNetCore.SignalR.Client;
@using FirstTier.Chat
@using FirstTier.Data
@using FirstTier.Models
@using FirstTier.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Chat</h3>
<hr />

@if (!_isChatting)
{
    <div class="form-group">
        <div id="categoryElement">
            <label class="user">User:</label><br>
            <input style="color: black" type="text" @bind="@account.username" />
        </div>
    </div>
    
    <button type="button" @onclick="@ChatRoom"><span class="oi oi-chat" aria-hidden="true"></span> Chat</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert" style="color: red">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@account.username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    
    // display messages
    <div id="scrollbox" style="color: white">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.messageBody</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.username</div>
                    <div class="msg">@item.messageBody</div>
                </div>
            }
        }
        <hr />
        <textarea style="color: white" class="input-lg" placeholder="Enter your comment" @bind="@_newMessage"></textarea>
        <button style="color: white" class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    [Parameter]
    // user data
    public string Id { get; set; }
    private Account account = new Account();
    private bool isUser;
    
    //message data
    private Message message = new Message();
    
    // flag to indicate chat status
    private bool _isChatting = false;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task ChatRoom()
    {
        // check if user is valid
        User user  = ((UserCustomAuthenticationStateProvider) AuthenticationStateProvider).GetCurrentUser();
        if (user != null)
        {
            isUser = user.ID == account.ID;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // Create the chat client
            string baseUrl = NavigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {account.username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(account.username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message());

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {account.username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", account.username, message);

            _newMessage = string.Empty;
        }
    }
}