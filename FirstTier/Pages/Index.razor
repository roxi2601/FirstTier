@layout MainLayout
@page "/"
@using FirstTier.Models
@using System.Drawing
@using System.Drawing.Imaging
@using System.IO
@using FirstTier.Data
@using System.Collections.ObjectModel
@inject ArtworkService ArtworkService
@inject NavigationManager NavigationManager

<div class="col-12 row" id="filters">
    &nbsp;&nbsp;&nbsp;
    <label style="color: white">Filter by price:&nbsp;</label>
    <label style="color: white">min </label>

    <input class="form-control" type="number" @bind="minPrice" style="width:150px"/>
    &nbsp;
    <label style="color: white">max </label>
    <input class="form-control" type="number" @bind="maxPrice" style="width:150px"/>
    &nbsp;&nbsp;&nbsp;

    <label style="color: white">Filter by category: </label>

    <select @bind="category">
        <option value="Paintings">Paintings</option>
        <option value="Sculptures">Sculptures</option>
        <option value="Prints">Prints</option>
        <option value="Photography">Photography</option>
        <option value="Drawings">Drawings</option>
        <option value="Graphics">Graphics</option>
        <option value="Media">Media</option>
        <option value="Other">Other</option>
        <option value="All">All</option>
    </select>

    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <button @onclick="ExecuteFilter">
        <span>Filter</span>
    </button>
    
    <div class="row col-md-3 pull-right">
        <input type="text" id="txtSearch" placeholder="Search..." class="form-control" @bind="SearchTerm" @bind:event="oninput"/></div>
    <button @onclick="SearchField">
            <span>Search</span>
        </button>
</div>

<div id="artworks">
    @if (artworksToShow == null || artworksToShow.Count == 0)
    {
        <p>
            <em> Loading.. </em>
        </p>
    }
    else if (!artworksToShow.Any())
    {
        <p>
            <em>No offers exist, Please add some.</em>
        </p>
    }
    else
    {
        <div class="col-12 row">
            @foreach (var artwork in artworksToShow)
            {
                <div class="col-4">
                    <div id="artworkElement">
                        <div id="categoryElement">
                            <label style="color: white">@artwork.category</label>
                        </div>
                        <img src="@PrepareSRC(artwork)" alt="picture" class="img-thumbnail" style="height: 230px" @onclick="() => ImageClick(artwork.id)"><br>
                        <label id="artworkTitleElement">@artwork.title</label>
                        <div id="artworkPriceElement">
                            <label>@artwork.price €</label>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="pagination">
    <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>
    @for (int i = startPage; i <= endPage; i++)
    {
        var currentPage = i;
        <button class="btn btn-custom pagebutton @(currentPage == curPage ? "btn-danger" : "")" @onclick=@(async () => await refreshRecords(currentPage))>
            @currentPage
        </button>
    }
    <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>

</div>


@code
{
    [Parameter]
    public string Id { get; set; }

    private int? maxPrice;
    private int? minPrice;
    private string? category;
    private string? title;
    private string? description;
    private string? author;
    private IList<Artwork> artworks;
    int id;
    Artwork artwork = new Artwork();
    private IList<Artwork> artworksToShow;
    //private IList<Artwork> searchedArtworksToShow;
    private string imagePath = "images/paleta.jpg";

    //for searching
    private string searchTerm;

    private string SearchTerm
    {
        get { return searchTerm; }
        set
        {
            searchTerm = value;
            FilterRecords();
        }
    }

    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string data;
    string sortColumnName = "ID";
    string sortDir = "DESC";

    #endregion

    private void ImageClick(int id)
    {
        NavigationManager.NavigateTo("/ArtworkPage/" + id);
    }

    private string PrepareSRC(Artwork artwork)
    {
        if (artwork.pictureBytes != null)
        {
            return "images/artwork" + artwork.id + ".jpg";
        }
        return "images/paleta.jpg";
    }

    protected async Task Delete()
    {
        await ArtworkService.DeleteArtworkAsync(id);
        artworks = await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
    }

    private void ExecuteFilter()
    {
        if (maxPrice == null && minPrice == null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks;
        }
        else if (maxPrice != null && minPrice == null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks.Where(artwork => artwork.price < maxPrice).ToList();
        }
        else if (maxPrice != null && minPrice != null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks.Where(artwork => artwork.price < maxPrice && artwork.price > minPrice).ToList();
        }
        else if (maxPrice == null && minPrice != null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks.Where(artwork => artwork.price > minPrice).ToList();
        }
        else if (maxPrice == null && minPrice == null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.category.Equals(category)).ToList();
        }
        else if (maxPrice != null && minPrice != null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.price > minPrice && artwork.price < maxPrice && artwork.category.Equals(category)).ToList();
        }
        else if (maxPrice == null && minPrice != null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.price > minPrice && artwork.category.Equals(category)).ToList();
        }
        else if (maxPrice != null && minPrice == null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.price < maxPrice && artwork.category.Equals(category)).ToList();
        }
        Console.WriteLine(category + "     " + minPrice + "     " + maxPrice);
    }

    protected override async Task OnInitializedAsync()
    {
        artworks = await ArtworkService.GetArtworksAsync();
        artworks = artworks.Reverse().ToList();
        artworksToShow = artworks;
        foreach (var artwork in artworksToShow)
        {
            if (artwork.pictureBytes != null)
            {
                var ms = new MemoryStream();
                ms.Write(artwork.pictureBytes);
                Image.FromStream(ms).Save("wwwroot/images/artwork" + artwork.id + ".jpg", ImageFormat.Jpeg);
            }
            if (searchTerm != null)
            {
    //display total page buttons
                pagerSize = 3;
                pageSize = 2;
                curPage = 1;
                artworks = await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
                totalRecords = await ArtworkService.CountAsync(searchTerm);
                totalPages = (int) Math.Ceiling(totalRecords / (decimal) pageSize);
                SetPagerSize("forward");
            }
        }
    }

    private bool isSortedAscending;
    private string activeSortColumn;

    private async Task<List<Artwork>> SortRecords(string columnName, string dir)
    {
        return await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            artworks = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                artworks = await SortRecords(columnName, "DESC");
            }
            else
            {
                artworks = await SortRecords(columnName, "ASC");
            }
            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SearchField()
    {
        if (searchTerm != null && searchTerm.Contains(artwork.title))
        {
            artworksToShow = artworks.Where(i => i.title.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }
        else if (searchTerm != null && searchTerm.Contains(artwork.description))
        {
            artworksToShow = artworks.Where(i => i.description.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }
        else if (searchTerm != null && searchTerm.Contains(artwork.author))
        {
            artworksToShow = artworks.Where(i => i.author.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }
        else if (searchTerm != null && searchTerm.Contains(artwork.category))
        {
            artworksToShow = artworks.Where(i => i.category.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }

        Console.WriteLine(title + "     " + description + "     " + author + "     " + category);
    }

    public async Task refreshRecords(int currentPage)
    {
        artworks = await ArtworkService.ListAllAsync((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }
}