@layout MainLayout
@page "/"
@using FirstTier.Models
@using System.Drawing
@using System.Drawing.Imaging
@using System.IO
@using FirstTier.Data
@using System.Collections.ObjectModel
@inject ArtworkService ArtworkService
@inject NavigationManager NavigationManager

<div class="col-12 row" id="filters">
    &nbsp;&nbsp;&nbsp;
    <label style="color: white">Filter by price:&nbsp;</label>
    <label style="color: white">min </label>

    <input class="form-control" type="number" @bind="minPrice" style="width:150px"/>
    &nbsp;
    <label style="color: white">max </label>
    <input class="form-control" type="number" @bind="maxPrice" style="width:150px"/>
    &nbsp;&nbsp;&nbsp;

    <label style="color: white">Filter by category: </label>

    <select @bind="category">
        <option value="Paintings">Paintings</option>
        <option value="Sculptures">Sculptures</option>
        <option value="Prints">Prints</option>
        <option value="Photography">Photography</option>
        <option value="Drawings">Drawings</option>
        <option value="Graphics">Graphics</option>
        <option value="Media">Media</option>
        <option value="Other">Other</option>
        <option value="All">All</option>
    </select>

    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <button @onclick="ExecuteFilter">
        <span>Filter</span>
    </button>
    
    <div class="row col-md-3 pull-right">
        <input type="text" id="txtSearch" placeholder="Search..." class="form-control" @bind="searchTerm"/></div>
    <button @onclick="SearchField">
            <span>Search</span>
        </button>
</div>

<div id="artworks">
    @if (artworksToShow == null || artworksToShow.Count == 0)
    {
        <p>
            <em> Loading...</em>
        </p>
    }
    else if (!artworks.Any())
    {
        <p>
            <em>No offers exist, Please add some.</em>
        </p>
    }
    else
    {
        <div class="col-12 row">
            @foreach (var artwork in artworksToShow)
            {
                <div class="col-4">
                    <div id="artworkElement">
                        <div id="categoryElement">
                            <label style="color: white">@artwork.category</label>
                        </div>
                        <img src="@PrepareSRC(artwork)" alt="picture" class="img-thumbnail" style="height: 230px" @onclick="() => ImageClick(artwork.id)"><br>
                        <label id="artworkTitleElement">@artwork.title</label> <label id="artworkAuthorElement"> - @artwork.author</label>
                        <div id="artworkPriceElement">
                            <label>@artwork.price €</label>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>


@code
{

    [Parameter]
    public string Id { get; set; }

    private int id;
    private int? maxPrice;
    private int? minPrice;
    private string? category;
    private string? title;
    private string? description;
    private string? author;

    private IList<Artwork> artworks;
    private IList<Artwork> artworksToShow;
    
    private IList<Account> accounts;
    private IList<Account> accountsToShow;

    private Artwork artwork = new Artwork();
    private Account account = new Account();
    
    private string imagePath = "images/paleta.jpg";
    string errorMessage = "";

    //for searching
    private string? searchTerm { get; set; } = ""; // to prevent from nulls

    private void ImageClick(int id)
    {
        NavigationManager.NavigateTo("/ArtworkPage/" + id);
    }

    private string PrepareSRC(Artwork artwork)
    {
        if (artwork.pictureBytes != null)
        {
            return "images/artwork" + artwork.id + ".jpg";
        }
        return "images/paleta.jpg";
    }
    
    private void ExecuteFilter()
    {
        if (maxPrice == null && minPrice == null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks;
        }
        else if (maxPrice != null && minPrice == null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks.Where(artwork => artwork.price < maxPrice).ToList();
        }
        else if (maxPrice != null && minPrice != null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks.Where(artwork => artwork.price < maxPrice && artwork.price > minPrice).ToList();
        }
        else if (maxPrice == null && minPrice != null && (category == null || category.Equals("All")))
        {
            artworksToShow = artworks.Where(artwork => artwork.price > minPrice).ToList();
        }
        else if (maxPrice == null && minPrice == null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.category.Equals(category)).ToList();
        }
        else if (maxPrice != null && minPrice != null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.price > minPrice && artwork.price < maxPrice && artwork.category.Equals(category)).ToList();
        }
        else if (maxPrice == null && minPrice != null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.price > minPrice && artwork.category.Equals(category)).ToList();
        }
        else if (maxPrice != null && minPrice == null && category != null && !category.Equals("All"))
        {
            artworksToShow = artworks.Where(artwork => artwork.price < maxPrice && artwork.category.Equals(category)).ToList();
        }
        Console.WriteLine(category + "     " + minPrice + "     " + maxPrice);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            artworks = await ArtworkService.GetArtworksAsync();
            artworks = artworks.Reverse().ToList();
            artworksToShow = artworks;
            
            foreach (var artwork in artworksToShow)
            {
                if (artwork.pictureBytes != null)
                {
                    var ms = new MemoryStream();
                    ms.Write(artwork.pictureBytes);
                    Image.FromStream(ms).Save("wwwroot/images/artwork" + artwork.id + ".jpg", ImageFormat.Jpeg);
                }
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    
    private void SearchField()
    {
        try
        {
            if (searchTerm == null)
            {
                artworksToShow = artworks;
            }
            else if (searchTerm != null)
            {
                artworksToShow = artworks.Where(artwork => artwork.title.ToLower().Contains(searchTerm.ToLower()) || 
                                                            artwork.description.ToLower().Contains(searchTerm.ToLower()) ||
                                                            artwork.author.ToLower().Contains(searchTerm.ToLower()) || 
                                                            artwork.category.ToLower().Contains(searchTerm.ToLower())).ToList();
            }
            Console.WriteLine(title + "     " + description + "     " + author + "     " + category);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}