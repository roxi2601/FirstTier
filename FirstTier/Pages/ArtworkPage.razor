@page "/ArtworkPage/{id}"
@using FirstTier.Data
@using FirstTier.Models
@using Microsoft.VisualBasic.CompilerServices
@using FirstTier.Authentication
@inject ArtworkService ArtworkService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div id=artwork>
    <div class="col-12 row">
        <div class="col-6">
            <div id="artworkTitleElement"><h1>@artwork.title</h1></div>
        </div>
        <div class="col-6">
            <div id="artworkAuthorElement">
                <h1 style="text-align: right">@artwork.author</h1>
            </div>
        </div>
        <div class="col-6">
            <img  src="@imagePath" class="img-thumbnail" alt="picture"/>
            <div id="categoryElement"><label style="color: white">@artwork.category</label></div>
        </div>
        <div class="col-6">
            <div class="container">
                <div class="col-12 row">
                    
                    <div class="col-3">
                         <button @onclick="() => ProfileClick(artwork.userId)">
                             <span>See owner</span>
                             </button>
                    </div>
                    <div class="col-3">
                        @if (isOwner)
                        {
                            <button @onclick="Edit">
                                <span>Edit</span>
                            </button>
                        }

                    </div>
                    <div class="col-3">
                        <AuthorizeView Policy="admin">
                            <button @onclick="Delete">
                                <span>Delete</span>
                            </button>
                        </AuthorizeView>
                        @if (isOwner)
                        {
                            <button @onclick="Delete">
                                <span>Delete</span>
                            </button>
                        }
                    </div>
                    <div class="col-3">
                        @if (!isOwner)
                        {
                            <AuthorizeView Policy="LoggedButNotAdmin">
                                <button @onclick="Report">
                                    <span>Report</span>
                                </button>
                            </AuthorizeView>
                        }
                    </div>
                    <div class="col-3">
                        <AuthorizeView Policy="LoggedUser">
                            @if (!isOwner)
                            {
                                <button style="background-color: black" @onclick="Chat">

                                    <span style="color: white">Contact</span>
                                </button>

                            }
                        </AuthorizeView>
                    </div>
                    <div class="col-12">
                        <h3 style="text-align: right">@artwork.price €</h3>
                    </div>
                    @*<div class="col-12">*@
                    <div id="descriptionElement">
                        <h5 style="color: white">Description</h5>
                        <p style="color: white">@artwork.description</p>
                    </div>
                    @*</div>*@
                </div>
            </div>
        </div>
       <label style="color: red">@errorMessage</label>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    bool isOwner;
    string errorMessage = "";

    int id;

    Artwork artwork = new Artwork();
    string imagePath = "images/temporary.jpg";


    private void ProfileClick(int id)
    {
        NavigationManager.NavigateTo("/Profile/"+id);
    }

    public void Chat()
    {
        NavigationManager.NavigateTo("/Chat");
    }

    public void Delete()
    {
        try
        {
            ArtworkService.DeleteArtworkAsync(id);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    public void Edit()
    {
        NavigationManager.NavigateTo("/EditArtwork/"+id);
    }
    public void Report()
    {
        //HERE IS PLACE FOR MELANIA'S IMPLEMENTATION OF REPORTING/NOTIFICATIONS FUNCTIONALITY
    }

    protected override async Task OnInitializedAsync()
    {
        
        id = Int32.Parse(Id);
        artwork = await ArtworkService.GetArtworkAsync(id);
        imagePath = "images/artwork" + artwork.id+".jpg";
         User user  = ((UserCustomAuthenticationStateProvider) AuthenticationStateProvider).GetCurrentUser();
        if (user != null)
        {
            isOwner = user.ID == artwork.userId;
        }
    }

}