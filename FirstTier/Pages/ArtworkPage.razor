@page "/ArtworkPage/{id}"
@using FirstTier.Data
@using FirstTier.Models
@using Microsoft.VisualBasic.CompilerServices
@using FirstTier.Authentication
@inject ArtworkService ArtworkService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div id=artwork>
    <div class="row col-md-3 pull-right">
        <input type="text" id="txtSearch" placeholder="Search..." class="form-control" @bind="SearchTerm" @bind:event="oninput" />
    </div>
    <div class="col-12 row">
        <div class="col-6">
            <div id="artworkTitleElement">
                <h1>@artwork.title</h1></div>
        </div>
        <div class="col-6">
            <div id="artworkAuthorElement">
                <h1 style="text-align: right">@artwork.author</h1>
            </div>
        </div>
        <div class="col-6">
            <img src="@imagePath" class="img-thumbnail" alt="picture"/>
            <div id="categoryElement"><label style="color: white">@artwork.category</label></div>
        </div>
        <div class="col-6">
            <div class="container">
                <div class="col-12 row">

                    <div class="col-3">
                        <button @onclick="() => ProfileClick(artwork.userId)">
                            <span>See owner</span>
                        </button>
                    </div>
                    <div class="col-3">
                        @if (isOwner)
                        {
                            <button @onclick="Edit">
                                <span>Edit</span>
                            </button>
                        }
                    </div>
                    <div class="col-3">
                        <AuthorizeView Policy="admin">
                            <button @onclick="Delete">
                                <span>Delete</span>
                            </button>
                        </AuthorizeView>
                        @if (isOwner)
                        {
                            <button @onclick="Delete">
                                <span>Delete</span>
                            </button>
                        }
                    </div>
                    <div class="col-3">
                        @if (!isOwner)
                        {
                            <AuthorizeView Policy="LoggedButNotAdmin">
                                <button @onclick="Report">
                                    <span>Report</span>
                                </button>
                            </AuthorizeView>
                        }
                    </div>
                    <div class="col-3">
                        <AuthorizeView Policy="LoggedUser">
                            @if (!isOwner)
                            {
                                <button style="background-color: black" @onclick="Chat">

                                    <span style="color: white">Contact</span>
                                </button>

                            }
                        </AuthorizeView>
                    </div>
                    <div class="col-12">
                        <h3 style="text-align: right">@artwork.price €</h3>
                    </div>
                    @*<div class="col-12">*@
                    <div id="descriptionElement">
                        <h5 style="color: white">Description</h5>
                        <p style="color: white">@artwork.description</p>
                    </div>
                    @*</div>*@
                </div>
            </div>
        </div>
        <label style="color: red">@errorMessage</label>
    </div>
        <div class="pagination">
             <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("previous"))>Prev</button>
             @for (int i = startPage; i <= endPage; i++)
             {
                 var currentPage = i;
                 <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async () =>await refreshRecords(currentPage))>
                     @currentPage
                 </button>
             }
             <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("next"))>Next</button>
         </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    bool isOwner;
    string errorMessage = "";

    int id;

    List<Artwork> artworks;
    Artwork artwork = new Artwork();
    string imagePath = "images/paleta.jpg";

    //for searching
    private string searchTerm;
    private string SearchTerm {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }
    #region Pagination
    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";
    #endregion

    private void ProfileClick(int id)
    {
        NavigationManager.NavigateTo("/Profile/"+id);
    }

    public void Chat()
    {
        NavigationManager.NavigateTo("/Chat");
    }
    
    protected async Task Delete()
    {
        try
        {
            /*ArtworkService.DeleteArtworkAsync(id);
            NavigationManager.NavigateTo("/");*/
            await ArtworkService.DeleteArtworkAsync(id);
            artworks = await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    public void Edit()
    {
        NavigationManager.NavigateTo("/EditArtwork/"+id);
    }
    public void Report()
    {
        //HERE IS PLACE FOR MELANIA'S IMPLEMENTATION OF REPORTING/NOTIFICATIONS FUNCTIONALITY
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            id = Int32.Parse(Id);
            artwork = await ArtworkService.GetArtworkAsync(id);
            imagePath = "images/artwork" + artwork.id + ".jpg";
            User user = ((UserCustomAuthenticationStateProvider) AuthenticationStateProvider).GetCurrentUser();
            if (user != null)
            {
                isOwner = user.ID == artwork.userId;
            }
            if (searchTerm != null)
            {
                //display total page buttons
                pagerSize = 3;
                pageSize = 2;
                curPage = 1;
                artworks = await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
                totalRecords = await ArtworkService.CountAsync(searchTerm);
                totalPages = (int) Math.Ceiling(totalRecords / (decimal) pageSize);
                SetPagerSize("forward");
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    
    private bool isSortedAscending;
    private string activeSortColumn;
    private async Task<List<Artwork>> SortRecords(string columnName, string dir)
    {
        return await ArtworkService.ListAllAsync((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    }
    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            artworks = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                artworks = await SortRecords(columnName, "DESC");
            }
            else
            {
                artworks = await SortRecords(columnName, "ASC");
            }
            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    
    public async Task refreshRecords(int currentPage)
    {
        artworks = await ArtworkService.ListAllAsync((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }
    
    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }
    
    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }
    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }
}